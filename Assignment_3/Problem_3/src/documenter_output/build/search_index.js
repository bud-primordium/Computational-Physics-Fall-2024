var documenterSearchIndex = {"docs":
[{"location":"interaction.html#Interaction-Module","page":"Interaction","title":"Interaction Module","text":"","category":"section"},{"location":"interaction.html","page":"Interaction","title":"Interaction","text":"This module handles interaction and plotting functions to display and visualize results.","category":"page"},{"location":"interaction.html","page":"Interaction","title":"Interaction","text":"Modules = [SchrödingerSolver.Interaction]\nOrder   = [:function, :type]","category":"page"},{"location":"interaction.html#Main.SchrödingerSolver.Interaction.display_menu-Tuple{}","page":"Interaction","title":"Main.SchrödingerSolver.Interaction.display_menu","text":"display_menu()\n\nDisplays the main menu options to the user.\n\n\n\n\n\n","category":"method"},{"location":"interaction.html#Main.SchrödingerSolver.Interaction.plot_wavefunctions-Tuple{AbstractVector{Float64}, Vector{Vector{Float64}}, Int64, String, Vector{Float64}}","page":"Interaction","title":"Main.SchrödingerSolver.Interaction.plot_wavefunctions","text":"plot_wavefunctions(\n    x_vals::AbstractVector{Float64},\n    wavefunctions::Vector{Vector{Float64}},\n    num_levels::Int,\n    potential_name::String,\n    potential_params::Vector{Float64}\n)\n\nPlots the wave functions.\n\nArguments\n\nx_vals: Values of x.\nwavefunctions: Precomputed and normalized wave functions.\nnum_levels: Number of energy levels to plot.\npotential_name: The name of the potential function.\npotential_params: Coefficients for the polynomial potential function.\n\n\n\n\n\n","category":"method"},{"location":"methods.html#Methods-Module","page":"Methods","title":"Methods Module","text":"","category":"section"},{"location":"methods.html","page":"Methods","title":"Methods","text":"This module provides methods for solving integrals and other calculations.","category":"page"},{"location":"methods.html","page":"Methods","title":"Methods","text":"Modules = [SchrödingerSolver.Methods]\nOrder   = [:function, :type]","category":"page"},{"location":"methods.html#Main.SchrödingerSolver.Methods.build_matrices-Tuple{Int64, Vector{Float64}, Vector{Float64}, Any, Any}","page":"Methods","title":"Main.SchrödingerSolver.Methods.build_matrices","text":"build_matrices(N, v, s, potential_gaussian_integral, potential_params)\n\nBuilds the Hamiltonian matrix H and overlap matrix S for the variational method.\n\nArguments\n\nN: Number of basis functions.\nv: Width parameters of the Gaussian basis functions.\ns: Centers of the Gaussian basis functions.\npotential_gaussian_integral: Function to compute the potential energy integral.\npotential_params: Additional parameters for the potential function.\n\nReturns\n\n(H, S): The Hamiltonian and overlap matrices.\n\n\n\n\n\n","category":"method"},{"location":"methods.html#Main.SchrödingerSolver.Methods.kinetic_integral-NTuple{4, Real}","page":"Methods","title":"Main.SchrödingerSolver.Methods.kinetic_integral","text":"kinetic_integral(v1, s1, v2, s2)\n\nComputes the kinetic energy integral between two Gaussian basis functions.\n\nThe kinetic energy integral is given by:\n\nT_ij = fracv_1^32 v_2^32 left( v_1 + v_2 - 2 v_1 v_2 (s_1 - s_2)^2 right)sqrtpi (v_1 + v_2)^52 e^- fracv_1 v_2 (s_1 - s_2)^2v_1 + v_2\n\nArguments\n\nv1: Width parameter of the first Gaussian basis function.\ns1: Center of the first Gaussian basis function.\nv2: Width parameter of the second Gaussian basis function.\ns2: Center of the second Gaussian basis function.\n\nReturns\n\nT_ij: The kinetic energy integral value.\n\n\n\n\n\n","category":"method"},{"location":"methods.html#Main.SchrödingerSolver.Methods.overlap_integral-NTuple{4, Real}","page":"Methods","title":"Main.SchrödingerSolver.Methods.overlap_integral","text":"overlap_integral(v1, s1, v2, s2)\n\nComputes the overlap integral between two Gaussian basis functions with parameters (v1, s1) and (v2, s2).\n\nThe overlap integral is given by:\n\nS_ij = fracsqrtv_1 v_2sqrtpi (v_1 + v_2) e^- fracv_1 v_2 (s_1 - s_2)^2v_1 + v_2\n\nArguments\n\nv1: Width parameter of the first Gaussian basis function.\ns1: Center of the first Gaussian basis function.\nv2: Width parameter of the second Gaussian basis function.\ns2: Center of the second Gaussian basis function.\n\nReturns\n\nS_ij: The overlap integral value.\n\n\n\n\n\n","category":"method"},{"location":"methods.html#Main.SchrödingerSolver.Methods.potential_integral_xn-Tuple{Real, Real, Real, Real, Int64}","page":"Methods","title":"Main.SchrödingerSolver.Methods.potential_integral_xn","text":"potential_integral_xn(v1, s1, v2, s2, n)\n\nComputes the potential energy integral for ( V(x) = x^n ) between two Gaussian basis functions.\n\nArguments\n\nv1, s1: Parameters of the first Gaussian basis function.\nv2, s2: Parameters of the second Gaussian basis function.\nn: The power of x in the potential function (integer from 0 to 4).\n\nReturns\n\nV_ij: The potential energy integral value.\n\n\n\n\n\n","category":"method"},{"location":"methods.html#Main.SchrödingerSolver.Methods.solve_schrodinger-Tuple{Matrix{Float64}, Matrix{Float64}, Int64}","page":"Methods","title":"Main.SchrödingerSolver.Methods.solve_schrodinger","text":"solve_schrodinger(H, S, num_levels)\n\nSolves the generalized eigenvalue problem for the Hamiltonian H and overlap matrix S.\n\nArguments\n\nH: Hamiltonian matrix.\nS: Overlap matrix.\nnum_levels: Number of energy levels to compute.\n\nReturns\n\n(energies, states): The lowest num_levels eigenvalues and eigenvectors.\n\n\n\n\n\n","category":"method"},{"location":"index.html#SchrödingerSolver-Documentation","page":"Home","title":"SchrödingerSolver Documentation","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Welcome to the SchrödingerSolver documentation! This module provides utilities to solve the 1D Schrödinger equation using Gaussian basis functions.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Methods Module\nUtils Module\nInteraction Module","category":"page"},{"location":"utils.html#Utils-Module","page":"Utils","title":"Utils Module","text":"","category":"section"},{"location":"utils.html","page":"Utils","title":"Utils","text":"The Utils module includes utility functions that assist with data processing, normalization, and parameter handling.","category":"page"},{"location":"utils.html","page":"Utils","title":"Utils","text":"Modules = [SchrödingerSolver.Utils]\nOrder   = [:function, :type]","category":"page"},{"location":"utils.html#Main.SchrödingerSolver.Utils.check_positive_v-Tuple{Float64}","page":"Utils","title":"Main.SchrödingerSolver.Utils.check_positive_v","text":"check_positive_v(v)\n\nChecks if v is positive.\n\nArguments\n\nv: Value to check.\n\nThrows\n\nError if v <= 0.\n\n\n\n\n\n","category":"method"},{"location":"utils.html#Main.SchrödingerSolver.Utils.get_parameters-Tuple{String}","page":"Utils","title":"Main.SchrödingerSolver.Utils.get_parameters","text":"get_parameters(choice::String)\n\nRetrieves parameters based on the user's selection.\n\nArguments\n\nchoice: User selection for the potential type.\n\nReturns\n\n(N, v, s, potential_gaussian_integral, potential_params, potential_name, num_levels): Parameters for solving the Schrödinger equation.\n\n\n\n\n\n","category":"method"},{"location":"utils.html#Main.SchrödingerSolver.Utils.get_potential_function-Tuple{String}","page":"Utils","title":"Main.SchrödingerSolver.Utils.get_potential_function","text":"get_potential_function(choice::String)\n\nSelects the potential function based on user's choice.\n\nArguments\n\nchoice: User selection for the potential type.\n\nReturns\n\n[(potential_gaussian_integral, potential_name, potential_params)]: Potential function and parameters.\n\n\n\n\n\n","category":"method"},{"location":"utils.html#Main.SchrödingerSolver.Utils.normalize_wavefunction-Tuple{AbstractVector{Float64}, AbstractVector{Float64}}","page":"Utils","title":"Main.SchrödingerSolver.Utils.normalize_wavefunction","text":"normalize_wavefunction(x_vals::AbstractVector{Float64}, ψ::AbstractVector{Float64})::Vector{Float64}\n\nNormalizes the wave function ψ based on the integration over x_vals.\n\nArguments\n\nx_vals: Vector of x values.\nψ: Wave function to normalize.\n\nReturns\n\nNormalized wave function.\n\n\n\n\n\n","category":"method"},{"location":"utils.html#Main.SchrödingerSolver.Utils.read_int-Tuple{String, Int64}","page":"Utils","title":"Main.SchrödingerSolver.Utils.read_int","text":"read_int(prompt::String, default::Int)\n\nReads an integer from the user with a prompt. If the user presses enter without input, returns the default value.\n\nArguments\n\nprompt: The prompt message to display.\ndefault: The default value to return if no input is provided.\n\nReturns\n\nThe user-entered integer or the default value.\n\n\n\n\n\n","category":"method"},{"location":"utils.html#Main.SchrödingerSolver.Utils.read_number-Tuple{String, Float64}","page":"Utils","title":"Main.SchrödingerSolver.Utils.read_number","text":"read_number(prompt::String, default::Float64)\n\nReads a floating-point number from the user with a prompt. If the user presses enter without input, returns the default value.\n\nArguments\n\nprompt: The prompt message to display.\ndefault: The default value to return if no input is provided.\n\nReturns\n\nThe user-entered number or the default value.\n\n\n\n\n\n","category":"method"},{"location":"utils.html#Main.SchrödingerSolver.Utils.trapezoidal_integration-Tuple{AbstractVector{Float64}, AbstractVector{Float64}}","page":"Utils","title":"Main.SchrödingerSolver.Utils.trapezoidal_integration","text":"trapezoidal_integration(x, y)\n\nPerforms trapezoidal integration of y with respect to x.\n\nArguments\n\nx: Vector of x values.\ny: Vector of y values.\n\nReturns\n\nintegral: The result of the integration.\n\n\n\n\n\n","category":"method"}]
}
